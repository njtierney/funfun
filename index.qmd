---
title: "Practical Functions: Practically Magic"
subtitle: "University of Auckland"
date: "21st March 2024"
author: "Nicholas Tierney"
institute: Telethon Kids Institute
format: 
  revealjs:
    theme: [blood, extra.scss]
    incremental: true
    slide-number: true
    show-slide-number: all
    footer: "talks.njtierney.com/ua2024"
editor: visual
execute: 
  echo: false
  warning: false
  cache: true
  freeze: true
---

```{r}
#| label: library
#| include: false
library(tidyverse)
library(knitr)
library(colorspace)
library(naniar)
library(visdat)
library(icons)
```

```{r}
#| label: source-r-files
#| echo: false
#| message: false
#| output: false
lapply(list.files(here::here("R"), full.names = TRUE), source)
```

```{r}
#| label: helpers
#| include: false

icons_fa <- icons::fontawesome
icon_box <- icon_style(icons_fa$solid$`box-open`, fill = "#f0a800")
icon_link <- icon_style(icons_fa$solid$link, fill = "#f0a800")
icon_twitter <- icon_style(icons_fa$brands$twitter, fill = "#f0a800")
icon_github <- icon_style(icons_fa$brands$github, fill = "#f0a800")
icon_plane <- icon_style(icons_fa$solid$`paper-plane`, fill = "#f0a800")


as_table <- function(...) knitr::kable(..., format='html', digits = 3)

theme_set(
  theme_grey(base_size = 16) +
  theme(
    legend.position = "bottom",
    plot.background = element_rect(fill = "transparent"),
    legend.background = element_rect(fill = "transparent")
  )
)

# **ni**ck's **pa**lette
nipa <- list(red = "#c03018",
             orange = "#f0a800",
             green = "#609048",
             purple = "#484878",
             light_purple = "#A3A3BB",
             light_green = "#AFC7A3",
             light_orange = "#F7D37F",
             light_red = "#DF978B",
             pale_purple = "#ECECF1",
             pale_green = "#D7E3D1",
             pale_orange = "#FBE9BF",
             pale_red = "#EFCBC4")

```

# Audience

1.  Someone who has never written a function
2.  Someone who has written a couple of functions
3.  The sceptic function user
4.  The regular function user
5.  Various members of the R Core Team
    1.  Thomas Lumley
    2.  Simon Urbanek
    3.  Paul Murrell

::: notes
I want to start by saying that I want to cover a range of different audiences in this talk. I want this talk to be helpful for someone who has never written a function, through to someone who has written a couple of functions - the person who is suspicious of functions and doesn't really get the point - the regular function user, and also, I hope I can convey something useful to the various members of the R Core team and R developers. note: Make this a line graph or something?
:::

# Some thoughts

There are three things that I want to communicate in this talk:

1.  Good functions are tools to manage complexity

2.  Good functions are tools to explain and express ideas

3.  Good functions can be individually reasoned with

# Some thoughts

There are ~~three~~ 3 things ~~that~~ I want to communicate ~~in this talk~~:

Good functions:

1.  ~~Good functions~~ ~~a~~Are tools to manage complexity

2.  ~~Good functions~~ ~~a~~Are tools to explain and express ideas

3.  ~~Good functions~~ ~~a~~Can be individually reasoned with

# ~~Some thoughts~~ `communicate_key_ideas()`

~~There are 3 things I want to communicate:~~

Good functions:

1.  ~~Are tools to~~ manage complexity

2.  ~~Are tools to~~ explain and express ideas

3.  Can be individually reasoned with

# `convey_key_ideas()`

There are 3 things I want to communicate:

**Good** functions:

1.  Manage **complexity**

2.  Explain and express **ideas**

3.  Can be **individually reasoned** with

# where we are going

::: notes
I want to discuss basically 5 topics today:

1.  My motivation - why do I care so much about functions?
2.  The basics of what a function is, and the typical motivations for using them - DRY etc.
    1.  But the point here isn't so much about avoiding repitition, it's about expression
    2.  That's what I was chasing earlier - it wasn't about avoiding repetition, it was about my expression being cut off (maybe quote Jacob Collier?)
    3.  conclusion: Functions are about managing complexity
3.  Moving on to the motivations for what functions do well - emphasise actions (prior art hadley) - and how you can write bad functions that don't emphasise or name the actions
    1.  This section is about managing complexity, and scaling that appropriately
    2.  compile_report() vs six steps that go into that.
    3.  Conclusion: The idea of chunking up code to break down complexity. communicate the idea that this is an iterative process - as Hadley said in his "design of everyday functions" talk, you need to write, then rewrite, then re-re-re-re-write functions, in the same way that it takes time to write text to communicate to others. (might be a good time to
4.  Moving on to code smells and other practices you can use in your coding (prior art Jenny)
    1.  conclusion: here are some general tips on writing good functions
    2.  game: good function / bad function?
5.  Model how you do this part of your work. How do you move from writing code to writing functions. Writing functions doesn't have to be this "sometimes" activity - it should be part of a healthy data analysis. I will go through some common parts of a data analysis, and demonstrate a process for writing out steps as functions, and also special tools for creating, and understanding functions (fnmate, browser (also debugonce and recover). I want to cover this idea that you can use functions to manage your own complexity.
    1.  If you are doing a data analysis - moving from multiple scripts?
    2.  
6.  Finally points for growth - how do you get better at writing functions in your own life? some ideas: read other people's code! use things like targets! peer review your code with colleagues. Tell a story about how I was taught debugging when I first started programming and I just did not understand the reason why I would care. The reason it turns out - is that I didn't yet know about the idea of interactive vs non-interactive, or rather - the practitioner-programmer spectrum. And I guess that this is summarised by a nice slide from Hadley (<https://www.youtube.com/watch?v=Qne86lxjgtg>) - "you hear your code scream" vs "things break and people scream at you".
7.  Finally - I want to hear from you. Where am I wrong? Do you think functions are important?
    1.  "It is more important to ask the right questions than to give the right answers"
    2.  And I guess set this up as a question - I don't want to be wrong here. I want to help people write better functions, because I think that is really important.
    3.  But I also want to take this as an opportunity to have an exchange of ideas with a group here whose work I really respect.
:::

## list_prior_art()

::: notes
The thing that I want to communicate here is "I've learnt a lot from others - and in some ways this talk is just me remixing the important messages that others have already spent a good deal more time doing". So I want to start by firstly acknowledging five people whose talks and work have helped me understand functions in a deeper way to become a better programmer, and I want to note a key thing that they helped me understand.
:::

```         
list(
  prior_art("hadley"),
  prior_art("jenny"),
  prior_art("miles"),
  prior_art("joe"),
  prior_art("ross")
  )
```

# `prior_art("hadley")`

screenshot of Hadley's "managing many models" talk

![](images/clipboard-4268136480.png)

# `prior_art("jenny")`

# `prior_art("joe")`

# Background

Put More slides here.

::: notes
Speaker notes go here.
:::

# This next slide is an image

##  {background-image="images/IMAGE.png" background-size="contain"}

# Take homes

# Future Directions

::: {.fragment .fade-up}
-   More features
-   More features
-   More features
:::

# Test

# Thanks

::: columns
::: {.column width = "40%"}

-   Miles McBain
-   Nick Golding
-   Hadley Wickham
:::

::: {.column width = "40%"}

-   So many great people
-   So many great people
-   So many great people
-   So many great people

:::

::::

# Resources

-   So many things
-   So many things
-   So many things
-   So many things

# Colophon

-   Slides made using [quarto](https://github.com/quarto-dev/quarto)
-   Colours taken + modified from [lorikeet theme from ochRe](https://github.com/ropenscilabs/ochRe) [njtierney/njt-talks](github.com/njtierney/njt-talks) <!-- - Header font is **Josefin Sans** --> <!-- - Body text font is **Montserrat** --> <!-- - Code font is **Fira Mono** --> <!-- - template available:  -->

# Learning more

`r icon_box` [package link]()

`r icon_link` [talk link]()

`r icon_twitter` nj_tierney

`r icon_github` njtierney

`r icon_plane` nicholas.tierney\@gmail.com

# **End.**
