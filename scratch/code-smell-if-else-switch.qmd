# Some discussion on patterns/code smells

## Use switch + arg_match instead of if/else/error

A common pattern if including a lot of if / else statements:

```{r}
naive_predict <- function(data, formula, method) {
  if (method == "lm") {
    fit <- lm(formula, data = data)
  } else if (method == "loess") {
    fit <- loess(formula, data = data)
  } else if (method == "glm") {
    fit <- glm(formula, data = data, family = stats::gaussian())
  } else if (method == "rpart") {
    fit <- rpart(formula, data = data)
  } else {
    stop("do not currently support method: ", method)
  }
  preds <- predict(fit, data)
  data_with_preds <- cbind(preds, data)
  data_with_preds
}

lm_fit <- naive_predict(iris, Sepal.Length ~ Sepal.Width, "lm")
loess_fit <- naive_predict(iris, Sepal.Length ~ Sepal.Width, "loess")
glm_fit <- naive_predict(iris, Sepal.Length ~ Sepal.Width, "glm")

head(lm_fit)
head(loess_fit)
head(glm_fit)
```

Also note that we get an error when we provide something outside our
range:

```{r}
wat_fit <- naive_predict(iris, Sepal.Length ~ Sepal.Width, "wat")
```

Overall, this is fine, but we can manage some aspects of this using two
helper functions: `match.arg` and `switch`

```{r}
naive_predict_switch <- function(data, formula, method) {
  match.arg(
    arg = method,
    choices = c("lm", "loess", "glm")
  )
  
  fit <- switch(
    method,
    lm = lm(formula, data = data),
    loess = loess(formula, data = data),
    glm = glm(formula, data = data, family = stats::gaussian())
  )
  
  preds <- predict(fit, data)
  data_with_preds <- cbind(preds, data)
  data_with_preds
}
```

We get the same data

```{r}
lm_fit_switch <- naive_predict_switch(iris, Sepal.Length ~ Sepal.Width, "lm")
identical(lm_fit_switch, lm_fit)
```

And we also get error handling from `match.arg`

```{r}
lm_fit_wat <- naive_predict_switch(iris, Sepal.Length ~ Sepal.Width, "wat")
```

(An aside, using `rlang::arg_match0` gives you an even nicer warning:)

```{r}
naive_predict_rlang <-  function(data, formula, method) {
  rlang::arg_match0(
    arg = method,
    values = c("lm", "loess", "glm")
  )
  
  fit <- switch(
    method,
    "lm" = lm(formula, data = data),
    "loess" = loess(formula, data = data),
    "glm" = glm(formula, data = data, family = stats::gaussian())
  )
  
  preds <- predict(fit, data)
  data_with_preds <- cbind(preds, data)
  data_with_preds
}

lm_fit_wat <- naive_predict_rlang(iris, Sepal.Length ~ Sepal.Width, "wat")
```
