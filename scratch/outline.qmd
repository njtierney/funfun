# outline

I want to discuss basically 5 topics today:

1.  Motivation
    1.  Understand that I wanted to be able to understand and communicate what I was doing
    2.  Frustrated by not being able express those ideas -\> Functions were the form of expression that I wanted.
        1.  But I didn't understand they were what I needed because too often they were introduced as "celcius to farenheit", or "mean center a value" or "find odd numbers"
        2.  It's not that those things weren't useful
2.  Function Fundamentals
    1.  How to write a function -\> Chunking
    2.  DRY -\> Expression -\> Revisiting -\> Understanding
3.  Good and Bad Functions
    1.  Grab quote from advanced R
    2.  Use Miles' "Magic" as a design tool
    3.  Side Effects
    4.  Game: Good functions / bad function
4.  Functions in Practice
    1.  Example workflow â€“\> motivation for debugging tools
    2.  Demonstrate "writing a function first" -\> fnmate
5.  Developing Your Craft
    1.  It is an iterative process
    2.  

# Motivation

Why do I care so much about functions?

# Function fundamentals

The basics of what a function is, and the typical motivations for using them DRY, etc

Moving on to the motivations for what functions do well - emphasise actions (prior art hadley) - and how you can write bad functions that don't emphasise or name the actions

1.  The basics of what a function is, and the typical motivations for using them - DRY etc.
    1.  But the point here isn't so much about avoiding repitition, it's about expression
    2.  That's what I was chasing earlier - it wasn't about avoiding repetition, it was about my expression being cut off (maybe quote Jacob Collier?)
    3.  conclusion: Functions are about managing complexity

# Functions in practice

1.  Moving on to the motivations for what functions do well - emphasise actions (prior art hadley) - and how you can write bad functions that don't emphasise or name the actions
    1.  This section is about managing complexity, and scaling that appropriately
    2.  compile_report() vs six steps that go into that.
    3.  Conclusion: The idea of chunking up code to break down complexity. communicate the idea that this is an iterative process - as Hadley said in his "design of everyday functions" talk, you need to write, then rewrite, then re-re-re-re-write functions, in the same way that it takes time to write text to communicate to others. (might be a good time to
2.  Model how you do this part of your work. How do you move from writing code to writing functions. Writing functions doesn't have to be this "sometimes" activity - it should be part of a healthy data analysis. I will go through some common parts of a data analysis, and demonstrate a process for writing out steps as functions, and also special tools for creating, and understanding functions (fnmate, browser (also debugonce and recover). I want to cover this idea that you can use functions to manage your own complexity.
    1.  If you are doing a data analysis - moving from multiple scripts
3.  Model how you do this part of your work. How do you move from writing code to writing functions. Writing functions doesn't have to be this "sometimes" activity - it should be part of a healthy data analysis. To do this I want to model this behaviour by walking through a data analysis, and demonstrating writing functions, and also special tools for creating, and understanding functions (fnmate, browser (also debugonce and recover))
    -   Other ideas to demonstrate in this demo

        -   Maybe I want to simulate restarting R and coming back to it

            -   Ah man, I don't want to re-run this data analysis now.

# Good and Bad Functions (maybe ditch this)

1.  Moving on to code smells and other practices you can use in your coding (prior art Jenny)

    1.  conclusion: here are some general tips on writing good functions
    2.  game: good function / bad function?

important ideas: - bad names vs good names - bad arguments vs good arguments - body code that's too terse - If it fails it does it loudly vs quietly

Creative process - taste exceeds ability - creating things for you vs creating things for others

moving on to code smells and other practices you can use in your coding (prior art Jenny)

-   Can you guess what the function does by its name and inputs?

# Developing Your Craft

1.  Finally points for growth - how do you get better at writing functions in your own life? some ideas: read other people's code! use things like targets! peer review your code with colleagues. Tell a story about how I was taught debugging when I first started programming and I just did not understand the reason why I would care. The reason it turns out - is that I didn't yet know about the idea of interactive vs non-interactive, or rather - the practitioner-programmer spectrum. And I guess that this is summarised by a nice slide from Hadley (<https://www.youtube.com/watch?v=Qne86lxjgtg>) - "you hear your code scream" vs "things break and people scream at you".

Hadley talks about this idea of "code is a conversation" - when things break, or don't work, if you're working in this script-land, then you know when this breaks, and you might be able to jump back into things.

But if you're in programmer land, there's a wall between you and your code...sometimes.

Summarise by talking about how we slide from the user \<--\> developer seamlessly. This is actually what R is designed to do!:

![](images/clipboard-2863518647.png)

If you can take away one thing from this talk, practice Joe Cheng's point:

> break up inherently complicated things that we are trying to do into small pieces that are individually easy to reason about

# End

1.  Finally - I want to hear from you. Where am I wrong? Do you think functions are important?
    1.  "It is more important to ask the right questions than to give the right answers"
    2.  And I guess set this up as a question - I don't want to be wrong here. I want to help people write better functions, because I think that is really important.
    3.  But I also want to take this as an opportunity to have an exchange of ideas with a group here whose work I really respect.

# Extras

# other functional things

-   side effects?

# And what if none of this is new to you in the talk?

-   Here are some little tricks

    -   options(error = browser)

    -   options(error = recover)

    -   (turn off with)

    -   options(error = NULL)

-   Other essential shortcuts/tools for navigating function space

    -   Cmd + click - jump to function definition

    -   Ctrl + . - jump to file/function

-   Essential tools for creating new functions

    -   fnmate

-   

Jacob Collier

-   I think when you are in a creative process

-   When you get a taste of being in a creative process, being present in that feeling, being in an idea - there is no better feeling than that. So what am I going to chase besides that? Nothing feels better than that? Nothing feels better than that. Being in the middle of a tornado of presense of your idea. That feeling of "I think this might work"

-   ...Being in a creative process, being present in that feeling, being in an idea - there is no better feeling than that...Nothing feels better than that. Being in the middle of a tornado of presence of your idea. That feeling of "I think this might work".
