# Feedback from Miles

-   I like that you are talking at particular audiences/skill levels and what people will take away

-   point about debugging - it's a tool that allows you to jump into the function, maybe bump that up a little. It's an insightful point that as you learn functions you also need to learn tools to manage/explore/understand them. Otherwise you're just building boxes that you'll never be able to look inside and have to break open again.

-   This idea that R is a thing that allows you to move back and forward between being a user and a developer seamlessly - the REPL is a big part of that.

-   People feel like the flow of execution is harder to follow - like its slippery when they have lots of functions because they can't see it all in one place.

-   Putting it in functions feels like hiding parts of it away - they feel like they might not be able to get back to it or something.

-   The reason that they feel anxious about that is partly to do with their debugging workflow, - probably also to do with their project workflow, like If you feel like you're going to lose and get lost in your code, you probably don't have really good ways to grep through your project, for names of things, and jump to definitions, and there's all these things that you pick up. But if you don't have all these tricks and licks up your sleeve, it might feel really cumbersome to lay everything out in separate files and have functions that hide away all the code, when you just put it away in one long script file it's just your mouse and you scroll scroll scroll - it's a simple interfface

    -   These tricks and lick are like the tools we need to open the box, to get back in - we want to teach you a bit about how to drive cars, but also some basics of how to fix them

-   Functions are a tool for managing complexity and something you can individually reason with

    -   These are actually almost the same thing.

-   It's not just about DRY. It's about - is this something that you are going to revisit? IF you're planning to revisit this code a lot, then you don't want to have to step through this line by line.

    -   And this isn't what you end up doing anyway - what you end up doing is memorise the structure of the code. You look at the code and you go, "ah that's that loop", "that's the part where I do BLAH", "that's the part where I access some deeply nested thing...etc

    -   And what you're doing here, is you almost create little functional abstractions in your mental map of the code

    -   the problem with THAT is that when you change the code, you've changed the entire landscape, and it looks completely different, and now you're lost.

        -   compared to if you got to keep those abtractions but change the internal code, the abstraction remains constant

    -   Functions allow you to zoom out on a map - I'm going to sweep all this stuff up under this one name, and if I forget what that name does or what it represents, I can jump into the function, refresh my mental map of the code - and you can jump back through the higher level.

        -   writing functions helps you go up and down this ladder of abstraction. Where, I can imagine that at each rung there are these portholes that you can look through, to see the parts of the abstraction...

    -   So you can be cruising through this project with this really nice level of detail, where you don't have to constantly fight with the complexity, or treat carefully around it so as to not disturb the ability to understand the project

-   I like the ideas around functions for managing complexity and reasoning with

    -   Miles Mcbain: "If you've tried to understand the code three times, then you need to write a function" to paper over it and describe what it does, and put a label on it.

    -   It could just be, "this is the code the transforms the data to blah form" and now you know

-   That helps you stay at a higher level of detail.

This stuff is kind of advanced: for folks who how to write functions but are not completely sold or are maybe not writing their functions in the best possible way. Ideally, functions can have multiple roles: they can be DRY, they can be abstracting detail. They are giving you modulear pieces of code you can share between projects.

Maybe check out Hadley's design book - good discussion

The talk might end up not being as interesting for other people - e.g. Jeff Hanson might be someone who is like, "yeah, that's right!" But he might not learn as much.

The idea of doing a demo...

-   It could be really good

-   e.g., cleaning up a nested if else structure into a flatter structure

    -   this released some good endorphins - it was very satisfying seeing someone do this go from something gnarly to something that looked nice and clean

    -   that \^\^ could be something new to someone

    -   So this could be fun - to take a demonstration script and say how we might tidy it up into functions

-   It could be a bit of a risk to do the demo - but I wouldn't hang the entire talk on that - the talk has to have all the value, but the demo has to be the icing on the cake.

-   So, make the talk strong. And then save some space and be like, "look, let's just, all that stuff I just said, let's see how this all plays out. I've got a script file here and I've got some ideas and we can just do this together - and then if you do fumble a bit then everyone's coming here with you.

Another angle: Why do I, Nick Tierney, care so much about this, and why do I think it's probably one of the most important topics? Or at least a topic that a lot of people could get benefit from? Why kind of is that? Could be an opportunity to connect that to my work as a research software engineer. In that context...why functions become so important.

Of course functions are important in this context, we are talking about *shared* code. When you have something that is shared, it has to be readable.

Or you have a data analysis shared code, and it can't be tested it needs to be validated by peer review. It needs to be as readable as possible. Functions create readability by abstracting away complexity and details.

I might also care about it from the persepctive of debugging.

You have these complex data processing pipelines.

It becomes really important during crunch time.

You can individually reason with these parts of code on the screen.

I've needed to support code that is in flight. Debugging functions is like fixing the plane while we're flying. Otherwise taking the whole structure apart to look at it is like something you need to land the plane for.

Functional structure is awesome for debugging in R, because of the way it works and the ways that debugging tools - that could be a really insightful thing to talk about - it's all about logging

-   personally, never really used logs much

R has a different take on it - debugging access panels.

Those functions are also other things

# Miles notes from another chat

The reason you need to reason with code, is that there is not "correct"
methodology

We don't always have the capacity to write tests to understand whether a
methodology

developing a data analysis vs developing capability to do a data
analysis \* first principles every time vs doing it at scale

interpretable verifiable code

If you want to have a team that can do a lot You need to build trust in
understanding code

"Here's something I'll copy paste that I did last time"

-   the dangers of the zombie ressurection problem: you copy some code,
    fix a bug, and then someone else has already previously copied your
    code

The code documents the inference

can you have too many functions? - understanding the thread of
execution? - investing in the skillset of debugging tools - then you
can't spelunk. - if you can't spelunk then you want everything laid out

free solo-ing vs having a harness, knots, anchors.

I'm just going to type my entire analysis into the R console

climbing is an algorithm for staying alive Writing functions are too

Functions from Steph hazlitt one function() two function() I need a
function() Showing pride in writing a function, it’s a representative
Cutting and pasting I smell a function() storing helpful snippets I
smell a function…or even a package
